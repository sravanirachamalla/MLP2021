{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.3"
    },
    "colab": {
      "name": "2-PriyankaKapavarapu_20A1HP006.ipynb",
      "provenance": []
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FO7G_u0NiqDT"
      },
      "source": [
        "<h2 style=\"color:green\" align=\"center\">Question 2 Priyanka Kapavarapu\n",
        "20A1HP006</h2>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0euAS9n-iqDW"
      },
      "source": [
        "Above is a binary logistic regression problem as there are only two possible outcomes (i.e. if person buys insurance or he/she doesn't). "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xuzm0fSjiqDX"
      },
      "source": [
        "import pandas as pd #importing pandas and plots\n",
        "from matplotlib import pyplot as plt\n",
        "%matplotlib inline"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "aP_PCEqWiqDY",
        "outputId": "06ddda1d-987d-4fe7-aa28-a36d09e46a85"
      },
      "source": [
        "df = pd.read_csv(\"https://raw.githubusercontent.com/rssmahesh1/MLAP2021Exam/main/MALP2021%20Question%20paper/HR_data.csv\") #reading the dataset\n",
        "df.info() #datatypes of the attributes in the dataset\n",
        "df.head() #print the 1st 5 rows of the dataset"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 14999 entries, 0 to 14998\n",
            "Data columns (total 10 columns):\n",
            " #   Column                 Non-Null Count  Dtype  \n",
            "---  ------                 --------------  -----  \n",
            " 0   satisfaction_level     14999 non-null  float64\n",
            " 1   last_evaluation        14999 non-null  float64\n",
            " 2   number_project         14999 non-null  int64  \n",
            " 3   average_montly_hours   14999 non-null  int64  \n",
            " 4   time_spend_company     14999 non-null  int64  \n",
            " 5   Work_accident          14999 non-null  int64  \n",
            " 6   left                   14999 non-null  int64  \n",
            " 7   promotion_last_5years  14999 non-null  int64  \n",
            " 8   Department             14999 non-null  object \n",
            " 9   salary                 14999 non-null  object \n",
            "dtypes: float64(2), int64(6), object(2)\n",
            "memory usage: 1.1+ MB\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>satisfaction_level</th>\n",
              "      <th>last_evaluation</th>\n",
              "      <th>number_project</th>\n",
              "      <th>average_montly_hours</th>\n",
              "      <th>time_spend_company</th>\n",
              "      <th>Work_accident</th>\n",
              "      <th>left</th>\n",
              "      <th>promotion_last_5years</th>\n",
              "      <th>Department</th>\n",
              "      <th>salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.38</td>\n",
              "      <td>0.53</td>\n",
              "      <td>2</td>\n",
              "      <td>157</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>low</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.80</td>\n",
              "      <td>0.86</td>\n",
              "      <td>5</td>\n",
              "      <td>262</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>medium</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.11</td>\n",
              "      <td>0.88</td>\n",
              "      <td>7</td>\n",
              "      <td>272</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>medium</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.72</td>\n",
              "      <td>0.87</td>\n",
              "      <td>5</td>\n",
              "      <td>223</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>low</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.37</td>\n",
              "      <td>0.52</td>\n",
              "      <td>2</td>\n",
              "      <td>159</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>sales</td>\n",
              "      <td>low</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   satisfaction_level  last_evaluation  ...  Department  salary\n",
              "0                0.38             0.53  ...       sales     low\n",
              "1                0.80             0.86  ...       sales  medium\n",
              "2                0.11             0.88  ...       sales  medium\n",
              "3                0.72             0.87  ...       sales     low\n",
              "4                0.37             0.52  ...       sales     low\n",
              "\n",
              "[5 rows x 10 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "slXUbc3zjeWs",
        "outputId": "1cb796c0-2bb3-4a50-f8dd-e1401701eead"
      },
      "source": [
        "df.left.value_counts() #no. of employees who left the job"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    11428\n",
              "1     3571\n",
              "Name: left, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MnRjXZRuZWid"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import seaborn as sn\n",
        "%matplotlib inline"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9jpVD95wZZiR"
      },
      "source": [
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "riHXDm1kZdsN",
        "outputId": "bc638ce5-5139-4a65-fb9a-7e139ee9710e"
      },
      "source": [
        "plt.bar(df['salary'],df['left'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<BarContainer object of 14999 artists>"
            ]
          },
          "metadata": {},
          "execution_count": 28
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAD4CAYAAAD8Zh1EAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAANqUlEQVR4nO3df6zd9V3H8eeLVsbicIvrnSH9sYtZl62ZKPOuzuyHmOFS0LSJzEHN4g8INVHmzIam/giSThMniZglFakZolOpdRFtpFrjBCFTRi/CCm3X7doy2zqhMCQiSim8/eN8q4fLvT2n5dx76YfnIyE73+/3c895p2d58u333O8hVYUk6cx31kIPIEkaDYMuSY0w6JLUCIMuSY0w6JLUiMUL9cJLliyp8fHxhXp5SToj3X///Y9X1dhMxxYs6OPj40xOTi7Uy0vSGSnJ12Y75iUXSWqEQZekRhh0SWqEQZekRhh0SWqEQZekRgwMepJbkjyW5OFZjifJp5NMJdmd5J2jH1OSNMgwZ+i3AmtOcvwSYGX3zwbgppc/liTpVA0MelXdDXzjJEvWAX9YPfcCb0hy3qgGlCQNZxR3ii4FDvVtH+72fX36wiQb6J3Fs2LFitN+wfGNd5z2z+rkHvmNH5yT5/U9mzu+Z2eeuXrP5vVD0araUlUTVTUxNjbjVxFIkk7TKIJ+BFjet72s2ydJmkejCPp24Me633Z5N/BUVb3kcoskaW4NvIae5DbgImBJksPArwLfBFBVvwvsAC4FpoBngJ+cq2ElSbMbGPSqWj/geAE/M7KJJEmnxTtFJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGjFU0JOsSbI/yVSSjTMcX5HkziQPJNmd5NLRjypJOpmBQU+yCNgMXAKsAtYnWTVt2a8A26rqQuAK4HdGPagk6eSGOUNfDUxV1YGqOgZsBdZNW1PAt3SPXw/82+hGlCQNY5igLwUO9W0f7vb1ux74SJLDwA7gozM9UZINSSaTTB49evQ0xpUkzWZUH4quB26tqmXApcBnk7zkuatqS1VNVNXE2NjYiF5akgTDBf0IsLxve1m3r99VwDaAqvon4BxgySgGlCQNZ5ig7wJWJjk/ydn0PvTcPm3NvwIfAEjydnpB95qKJM2jgUGvquPANcBOYB+932bZk2RTkrXdsk8AVyf5EnAb8BNVVXM1tCTppRYPs6iqdtD7sLN/33V9j/cC7xntaJKkU+GdopLUCIMuSY0w6JLUCIMuSY0w6JLUCIMuSY0w6JLUCIMuSY0w6JLUCIMuSY0w6JLUCIMuSY0w6JLUCIMuSY0w6JLUCIMuSY0w6JLUCIMuSY0w6JLUCIMuSY0w6JLUCIMuSY0w6JLUCIMuSY0w6JLUCIMuSY0w6JLUCIMuSY0w6JLUCIMuSY0w6JLUCIMuSY0YKuhJ1iTZn2QqycZZ1nw4yd4ke5L8yWjHlCQNsnjQgiSLgM3ADwCHgV1JtlfV3r41K4FfBN5TVU8medNcDSxJmtkwZ+irgamqOlBVx4CtwLppa64GNlfVkwBV9dhox5QkDTJM0JcCh/q2D3f7+r0VeGuSLyS5N8maUQ0oSRrOwEsup/A8K4GLgGXA3Um+o6r+o39Rkg3ABoAVK1aM6KUlSTDcGfoRYHnf9rJuX7/DwPaqeq6qDgJfoRf4F6mqLVU1UVUTY2NjpzuzJGkGwwR9F7AyyflJzgauALZPW/MX9M7OSbKE3iWYAyOcU5I0wMCgV9Vx4BpgJ7AP2FZVe5JsSrK2W7YTeCLJXuBO4Oer6om5GlqS9FJDXUOvqh3Ajmn7rut7XMDHu38kSQvAO0UlqREGXZIaYdAlqREGXZIaYdAlqREGXZIaYdAlqREGXZIaYdAlqREGXZIaYdAlqREGXZIaYdAlqREGXZIaYdAlqREGXZIaYdAlqREGXZIaYdAlqREGXZIaYdAlqREGXZIaYdAlqREGXZIaYdAlqREGXZIaYdAlqREGXZIaYdAlqREGXZIaYdAlqREGXZIaYdAlqRFDBT3JmiT7k0wl2XiSdZclqSQToxtRkjSMgUFPsgjYDFwCrALWJ1k1w7pzgY8BXxz1kJKkwYY5Q18NTFXVgao6BmwF1s2w7pPAp4D/GeF8kqQhDRP0pcChvu3D3b7/k+SdwPKquuNkT5RkQ5LJJJNHjx495WElSbN72R+KJjkL+C3gE4PWVtWWqpqoqomxsbGX+9KSpD7DBP0IsLxve1m374RzgXcAdyV5BHg3sN0PRiVpfg0T9F3AyiTnJzkbuALYfuJgVT1VVUuqaryqxoF7gbVVNTknE0uSZjQw6FV1HLgG2AnsA7ZV1Z4km5KsnesBJUnDWTzMoqraAeyYtu+6WdZe9PLHkiSdKu8UlaRGGHRJaoRBl6RGGHRJaoRBl6RGGHRJaoRBl6RGGHRJaoRBl6RGGHRJaoRBl6RGGHRJaoRBl6RGGHRJaoRBl6RGGHRJaoRBl6RGGHRJaoRBl6RGGHRJaoRBl6RGGHRJaoRBl6RGGHRJaoRBl6RGGHRJaoRBl6RGGHRJaoRBl6RGGHRJaoRBl6RGGHRJasRQQU+yJsn+JFNJNs5w/ONJ9ibZneTzSd48+lElSSczMOhJFgGbgUuAVcD6JKumLXsAmKiqC4DPAb856kElSSc3zBn6amCqqg5U1TFgK7Cuf0FV3VlVz3Sb9wLLRjumJGmQYYK+FDjUt3242zebq4C/nulAkg1JJpNMHj16dPgpJUkDjfRD0SQfASaAG2Y6XlVbqmqiqibGxsZG+dKS9Kq3eIg1R4DlfdvLun0vkuRi4JeB76uqZ0czniRpWMOcoe8CViY5P8nZwBXA9v4FSS4EbgbWVtVjox9TkjTIwKBX1XHgGmAnsA/YVlV7kmxKsrZbdgPwOuDPkjyYZPssTydJmiPDXHKhqnYAO6btu67v8cUjnkuSdIq8U1SSGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGmHQJakRBl2SGjFU0JOsSbI/yVSSjTMcf02SP+2OfzHJ+KgHlSSd3MCgJ1kEbAYuAVYB65OsmrbsKuDJqnoLcCPwqVEPKkk6uWHO0FcDU1V1oKqOAVuBddPWrAP+oHv8OeADSTK6MSVJgyweYs1S4FDf9mHge2ZbU1XHkzwFvBF4vH9Rkg3Ahm7z6ST7T2foM9ASpv1ZvFLFv1vBGfR+ge9Z59X0nr15tgPDBH1kqmoLsGU+X/OVIMlkVU0s9Bwaju/Xmcf3rGeYSy5HgOV928u6fTOuSbIYeD3wxCgGlCQNZ5ig7wJWJjk/ydnAFcD2aWu2Az/ePf4Q8PdVVaMbU5I0yMBLLt018WuAncAi4Jaq2pNkEzBZVduBzwCfTTIFfINe9PX/XnWXmc5wvl9nHt8zIJ5IS1IbvFNUkhph0CWpEQZ9BJI8vdAzaHSS3JVkonu8I8kbFnqmV6sk40kenmH/piQXD/jZ65NcO3fTvfLM6++hS2eaqrp0oWfQS1XVdQs9wyuRZ+gjlJ4bkjyc5KEkl3f7NydZ2z2+Pckt3eMrk/z6Qs7ciu5M7stJbk3ylSR/nOTiJF9I8tUkq5N8c5JbktyX5IEk67qffW2SrUn2JbkdeG3f8z6SZMn0M8Uk1ya5vnt8V5Ibk0x2z/GuJH/eve6vzfefRYMWJfm9JHuS/G33ft2a5EMASS7t3vv7k3w6yV/1/eyq7v05kORnF2j+eeMZ+mj9MPBdwHfSuxV5V5K7gXuA99H7ff2lwHnd+vfR+24cjcZbgB8BrqR3/8SPAu8F1gK/BOyld4/Eld1llPuS/B3wU8AzVfX2JBcA/3war32sqiaSfAz4S+C76f0K778kubGqvNHu9K0E1lfV1Um2AZedOJDkHOBm4P1VdTDJbdN+9m3A9wPnAvuT3FRVz83X4PPNM/TRei9wW1U9X1WPAv8AvIsu6N23VO4FHk1yHvC9wD8u2LTtOVhVD1XVC8Ae4PPdDW4PAePAB4GNSR4E7gLOAVYA7wf+CKCqdgO7T+O1T9xs9xCwp6q+XlXPAgd48Z3WOnUHq+rB7vH99N7LE94GHKiqg9329KDfUVXPVtXjwGPAt83ppAvMM/R5UFVHujPCNcDdwLcCHwaerqr/XNDh2vJs3+MX+rZfoPf/9eeBy6rqRV8KN+QXgx7nxSdA58zy2v2v2//aOn39f57P03dJ7DR+tun3wjP00boHuDzJoiRj9M787uuO3Qv8HL2g3wNc2/2v5s9O4KMnvto5yYXd/rvpXZ4hyTuAC2b42UeBNyV5Y5LXAD80D/NqsP3At/f9R3UuX7hRFl7T/7ZaALfTu4zyJaCAX6iqf++O3QN8sKqmknyN3lm6QZ9fnwR+G9id5CzgIL0w3wT8fpJ9wD56f61/kap6rvu6i/vofRndl+dtas2qqv47yU8Df5Pkv+h9dvKq5a3/ks5oSV5XVU93f/PaDHy1qm5c6LkWgpdcJJ3pru4+6N5D76u7b17geRaMZ+iS1AjP0CWpEQZdkhph0CWpEQZdkhph0CWpEf8LbKYlRjcFBGUAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "QrAlyy7KaN7u",
        "outputId": "a82dba00-5e28-4d59-9e10-0859c0c7e75b"
      },
      "source": [
        "plt.bar(df['satisfaction_level'],df['left'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<BarContainer object of 14999 artists>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "nZ1VYiCWb7VX",
        "outputId": "5a339fd5-ebfe-4a3d-d250-9e477ac4b80b"
      },
      "source": [
        "sn.boxplot(x = 'left', y = 'satisfaction_level', data = df);"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z-yD1n2zak1x"
      },
      "source": [
        "influential_features = ['satisfaction_level', 'left', 'last_evaluation', 'promotion_last_5years', 'number_project']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "Ak6qiyChaqzN",
        "outputId": "95a821fe-76ff-4389-fc27-4b048cb481aa"
      },
      "source": [
        "df[influential_features].corr()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>satisfaction_level</th>\n",
              "      <th>left</th>\n",
              "      <th>last_evaluation</th>\n",
              "      <th>promotion_last_5years</th>\n",
              "      <th>number_project</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>satisfaction_level</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.388375</td>\n",
              "      <td>0.105021</td>\n",
              "      <td>0.025605</td>\n",
              "      <td>-0.142970</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>left</th>\n",
              "      <td>-0.388375</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.006567</td>\n",
              "      <td>-0.061788</td>\n",
              "      <td>0.023787</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>last_evaluation</th>\n",
              "      <td>0.105021</td>\n",
              "      <td>0.006567</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.008684</td>\n",
              "      <td>0.349333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>promotion_last_5years</th>\n",
              "      <td>0.025605</td>\n",
              "      <td>-0.061788</td>\n",
              "      <td>-0.008684</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.006064</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>number_project</th>\n",
              "      <td>-0.142970</td>\n",
              "      <td>0.023787</td>\n",
              "      <td>0.349333</td>\n",
              "      <td>-0.006064</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                       satisfaction_level  ...  number_project\n",
              "satisfaction_level               1.000000  ...       -0.142970\n",
              "left                            -0.388375  ...        0.023787\n",
              "last_evaluation                  0.105021  ...        0.349333\n",
              "promotion_last_5years            0.025605  ...       -0.006064\n",
              "number_project                  -0.142970  ...        1.000000\n",
              "\n",
              "[5 rows x 5 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 372
        },
        "id": "yfbOVG1IawPR",
        "outputId": "9cb8d03b-405e-48ec-a70b-b8e240e034ae"
      },
      "source": [
        "sn.heatmap(df[influential_features].corr(), annot=True);"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "-NPcX87EiqDZ",
        "outputId": "127e6514-19bb-4105-fb55-70ef8e8d15c9"
      },
      "source": [
        "plt.scatter(df.satisfaction_level,df.left,marker='+',color='red') #salary of employees who left"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7f2e85e3dc10>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Buf0WaNOkcog"
      },
      "source": [
        "import statsmodels.api as sm\n",
        "Y = df.left\n",
        "X = sm.add_constant( df[['satisfaction_level']] )"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rBNPO8t6kLLZ"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X,\n",
        "Y,\n",
        "test_size = 0.2,\n",
        "random_state = 42)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "Q0aFKtoUiqDa",
        "outputId": "b474e8bb-a662-4dbb-a40e-525dd6e62756"
      },
      "source": [
        "X_test"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>const</th>\n",
              "      <th>satisfaction_level</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>6723</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6473</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4679</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>862</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7286</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.87</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3297</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.61</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14113</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.93</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5514</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9939</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14346</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.31</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>3000 rows × 2 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       const  satisfaction_level\n",
              "6723     1.0                0.65\n",
              "6473     1.0                0.88\n",
              "4679     1.0                0.69\n",
              "862      1.0                0.41\n",
              "7286     1.0                0.87\n",
              "...      ...                 ...\n",
              "3297     1.0                0.61\n",
              "14113    1.0                0.93\n",
              "5514     1.0                0.78\n",
              "9939     1.0                0.89\n",
              "14346    1.0                0.31\n",
              "\n",
              "[3000 rows x 2 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nPSybYjzlcxz"
      },
      "source": [
        "**Building Logistic Regression Model**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dqVaDQ8rlb0H",
        "outputId": "71ab2b38-d4fd-489a-ddb9-94d26a61ae24"
      },
      "source": [
        "import statsmodels.api as sm\n",
        "logit = sm.Logit(y_train, X_train)\n",
        "logit_model = logit.fit()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Optimization terminated successfully.\n",
            "         Current function value: 0.471424\n",
            "         Iterations 6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VGXnGG-ylogm"
      },
      "source": [
        "**Printing Model Summary**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 252
        },
        "id": "Tjtx58JnlmqZ",
        "outputId": "186c938c-7d4f-41c8-c40a-45bf6a24809b"
      },
      "source": [
        "logit_model.summary2()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "        <td>Model:</td>              <td>Logit</td>      <td>Pseudo R-squared:</td>    <td>0.142</td>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <td>Dependent Variable:</td>       <td>left</td>             <td>AIC:</td>        <td>11317.2326</td>\n",
              "</tr>\n",
              "<tr>\n",
              "         <td>Date:</td>        <td>2021-10-19 12:04</td>       <td>BIC:</td>        <td>11332.0178</td>\n",
              "</tr>\n",
              "<tr>\n",
              "   <td>No. Observations:</td>        <td>11999</td>       <td>Log-Likelihood:</td>    <td>-5656.6</td> \n",
              "</tr>\n",
              "<tr>\n",
              "       <td>Df Model:</td>              <td>1</td>            <td>LL-Null:</td>        <td>-6595.3</td> \n",
              "</tr>\n",
              "<tr>\n",
              "     <td>Df Residuals:</td>          <td>11997</td>        <td>LLR p-value:</td>      <td>0.0000</td>  \n",
              "</tr>\n",
              "<tr>\n",
              "      <td>Converged:</td>           <td>1.0000</td>           <td>Scale:</td>         <td>1.0000</td>  \n",
              "</tr>\n",
              "<tr>\n",
              "    <td>No. Iterations:</td>        <td>6.0000</td>              <td></td>               <td></td>     \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "           <td></td>           <th>Coef.</th>  <th>Std.Err.</th>     <th>z</th>     <th>P>|z|</th> <th>[0.025</th>  <th>0.975]</th> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>const</th>              <td>1.0135</td>   <td>0.0553</td>   <td>18.3274</td> <td>0.0000</td> <td>0.9051</td>  <td>1.1219</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>satisfaction_level</th> <td>-3.9029</td>  <td>0.0979</td>  <td>-39.8459</td> <td>0.0000</td> <td>-4.0949</td> <td>-3.7109</td>\n",
              "</tr>\n",
              "</table>"
            ],
            "text/plain": [
              "<class 'statsmodels.iolib.summary2.Summary'>\n",
              "\"\"\"\n",
              "                          Results: Logit\n",
              "===================================================================\n",
              "Model:                Logit            Pseudo R-squared: 0.142     \n",
              "Dependent Variable:   left             AIC:              11317.2326\n",
              "Date:                 2021-10-19 12:04 BIC:              11332.0178\n",
              "No. Observations:     11999            Log-Likelihood:   -5656.6   \n",
              "Df Model:             1                LL-Null:          -6595.3   \n",
              "Df Residuals:         11997            LLR p-value:      0.0000    \n",
              "Converged:            1.0000           Scale:            1.0000    \n",
              "No. Iterations:       6.0000                                       \n",
              "-------------------------------------------------------------------\n",
              "                    Coef.  Std.Err.    z     P>|z|   [0.025  0.975]\n",
              "-------------------------------------------------------------------\n",
              "const               1.0135   0.0553  18.3274 0.0000  0.9051  1.1219\n",
              "satisfaction_level -3.9029   0.0979 -39.8459 0.0000 -4.0949 -3.7109\n",
              "===================================================================\n",
              "\n",
              "\"\"\""
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ymZ-k3Q6l0za"
      },
      "source": [
        "**Predicting on Test Data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fwakbh5nm6Es"
      },
      "source": [
        "y_pred_df = pd.DataFrame( { \"actual\": y_test,\n",
        "\"predicted_prob\": logit_model.predict(\n",
        "sm.add_constant( X_test ) ) } )"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3hQDbBIKnHDV"
      },
      "source": [
        "pred_prob>0.5 consider as 1, <0.5 consider as 0"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "zhS0LBsTnJJz",
        "outputId": "627858a9-7e1f-4bb4-e154-015356f0042e"
      },
      "source": [
        "y_pred_df.sample(5, random_state = 42)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>actual</th>\n",
              "      <th>predicted_prob</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>12673</th>\n",
              "      <td>1</td>\n",
              "      <td>0.393996</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7937</th>\n",
              "      <td>0</td>\n",
              "      <td>0.289278</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4787</th>\n",
              "      <td>0</td>\n",
              "      <td>0.084556</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14427</th>\n",
              "      <td>1</td>\n",
              "      <td>0.403352</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13423</th>\n",
              "      <td>0</td>\n",
              "      <td>0.058840</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       actual  predicted_prob\n",
              "12673       1        0.393996\n",
              "7937        0        0.289278\n",
              "4787        0        0.084556\n",
              "14427       1        0.403352\n",
              "13423       0        0.058840"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "DCCEjtUznUUU",
        "outputId": "818fa6ce-2bb2-4555-d36d-d6721c3fa42b"
      },
      "source": [
        "y_pred_df['predicted'] = y_pred_df.predicted_prob.map(\n",
        "lambda x: 1 if x > 0.5 else 0)\n",
        "\n",
        "y_pred_df.sample(5, random_state = 42)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>actual</th>\n",
              "      <th>predicted_prob</th>\n",
              "      <th>predicted</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>12673</th>\n",
              "      <td>1</td>\n",
              "      <td>0.393996</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7937</th>\n",
              "      <td>0</td>\n",
              "      <td>0.289278</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4787</th>\n",
              "      <td>0</td>\n",
              "      <td>0.084556</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14427</th>\n",
              "      <td>1</td>\n",
              "      <td>0.403352</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13423</th>\n",
              "      <td>0</td>\n",
              "      <td>0.058840</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       actual  predicted_prob  predicted\n",
              "12673       1        0.393996          0\n",
              "7937        0        0.289278          0\n",
              "4787        0        0.084556          0\n",
              "14427       1        0.403352          0\n",
              "13423       0        0.058840          0"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kUDqdajNnh3w"
      },
      "source": [
        "**Creating a Confusion Matrix** - To see if the prediction is accurate or not"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MXb3LRVBng7J"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sn\n",
        "%matplotlib inline\n",
        "from sklearn import metrics"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bAW-ZzHknpj5"
      },
      "source": [
        "def draw_cm( actual, predicted ):\n",
        "## Cret\n",
        "    cm = metrics.confusion_matrix( actual, predicted, [1,0] )\n",
        "    sn.heatmap(cm, annot=True, fmt='.2f',\n",
        "                xticklabels = [\"In the job\", \"Left the job\"] ,\n",
        "                yticklabels = [\"In the job\", \"Left the job\"] )\n",
        "    plt.ylabel('True label')\n",
        "    plt.xlabel('Predicted label')\n",
        "    plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "D5fxftquow5Z",
        "outputId": "7df991a1-8a59-4857-bd86-57e938a6912c"
      },
      "source": [
        "draw_cm( y_pred_df.actual,\n",
        "y_pred_df.predicted )"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cVVSN41EdBgh"
      },
      "source": [
        "The prediction of the employees leaving the job and those who actually left the job is 2099 and who haven't left and predicted the same is 165 showing the accuracy or True positive."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fG_hY6MxdatF"
      },
      "source": [
        "The prediction of employees leaving the job but haven't actually left and viceversa are 541 and 195 respectively showing false negative"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EhKwp1IMo_dK"
      },
      "source": [
        "**Measuring Accuracies**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DASf3223nWg7",
        "outputId": "4c74e9c5-1807-4f0a-ea26-618dfc7353bc"
      },
      "source": [
        "print( metrics.classification_report( y_pred_df.actual,\n",
        "y_pred_df.predicted ) )"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.80      0.91      0.85      2294\n",
            "           1       0.46      0.23      0.31       706\n",
            "\n",
            "    accuracy                           0.75      3000\n",
            "   macro avg       0.63      0.57      0.58      3000\n",
            "weighted avg       0.72      0.75      0.72      3000\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9I0L2a5_pLPm"
      },
      "source": [
        "**ROC & AUC**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xD5bQXkppM2P"
      },
      "source": [
        "def draw_roc( actual, probs ):\n",
        "    fpr, \\\n",
        "    tpr, \\\n",
        "    thresholds = metrics.roc_curve( actual,\n",
        "                                    probs,\n",
        "                                    drop_intermediate = False )\n",
        "    auc_score = metrics.roc_auc_score( actual, probs )\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n",
        "    plt.plot([0, 1], [0, 1], 'k--')\n",
        "    plt.xlim([0.0, 1.0])\n",
        "    plt.ylim([0.0, 1.05])\n",
        "    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n",
        "    plt.ylabel('True Positive Rate')\n",
        "    plt.legend(loc=\"lower right\")\n",
        "    plt.show()\n",
        "    \n",
        "    return fpr, tpr, thresholds"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JBS-5ll9o6iU"
      },
      "source": [
        "ROC curve (area) - shows accuracy"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 388
        },
        "id": "KRqXoI_-pSmI",
        "outputId": "6cb01ec4-ddcb-43ca-b8bf-6009844be859"
      },
      "source": [
        "fpr, tpr, thresholds = draw_roc( y_pred_df.actual,\n",
        "y_pred_df.predicted_prob)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7UrPrYGIpeZW",
        "outputId": "e38a6f3a-99bc-4bc2-c427-0a33965a8e93"
      },
      "source": [
        "auc_score = metrics.roc_auc_score( y_pred_df.actual,\n",
        "y_pred_df.predicted_prob )\n",
        "round( float( auc_score ), 2 )"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.74"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cORWP_heiqDp"
      },
      "source": [
        "**The accuracy of the model is 74% as shown above in the ROC curve**"
      ]
    }
  ]
}